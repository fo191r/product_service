plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.4'
	id 'io.spring.dependency-management' version '1.1.0'
	id "org.openapi.generator" version "6.4.0"
	id "com.palantir.docker" version "0.34.0"
}

group = 'com.study.docker'
version = '1.0.0'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
	mavenLocal()
}

ext {
	set('springCloudVersion', "2022.0.1")
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	compileOnly 'org.apache.tomcat.embed:tomcat-embed-core:9.0.30'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.8'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'com.study.common:common_utils:1.0.1'
	compileOnly 'org.apache.httpcomponents:httpcore:4.4.15'
	implementation 'javax.servlet:servlet-api:2.5'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'

	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

task openApiGenerateClean {
	delete 'src/main/java/generated'
}
tasks['openApiGenerate'].dependsOn openApiGenerateClean

def openApiOutputDir = "${projectDir}/src/main/java".toString()
openApiGenerate {
	generatorName = "spring"
	outputDir = openApiOutputDir
	inputSpec = "$projectDir/src/main/resources/openapi/api.yml".toString()
	modelPackage = "com.study.docker.openapi.model"
	apiPackage = "com.study.docker.openapi.api"
	configOptions = [
			hideGenerationTimestamp: "true",
			interfaceOnly: "true",
			useTags: "true",
			sourceFolder: "",
			delegatePattern: "true",
			dateLibrary: "java8"
	]
}
tasks.openApiGenerate {
	doLast {
		delete(
				"$openApiOutputDir/.openapi-generator",
				"$openApiOutputDir/.openapi-generator-ignore",
				"$openApiOutputDir/pom.xml",
				"$openApiOutputDir/README.md"
		)
	}
}
compileJava.mustRunAfter tasks.openApiGenerate

docker {
	name "roninlive/${project.name}:${project.version}"
	files "$buildDir/libs/${project.name}-${project.version}.jar"
	dockerfile file('src/main/resources/Dockerfile')
	buildArgs([JAR_FILE: "${project.name}-${project.version}.jar"])
}

tasks.named('test') {
	useJUnitPlatform()
}
